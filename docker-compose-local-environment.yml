services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.1
    container_name: local-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.9.1
    container_name: local-kafka
    depends_on:
      - zookeeper
    ports:
      - "${SPRING_KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${SPRING_KAFKA_PORT:-9092}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    env_file:
      - ./.env

  postgres:
    image: postgres:17
    container_name: local-postgres
    ports:
      - "${SPRING_DATASOURCE_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD:-postgres}
      SERVICE_USERS_DB_NAME: ${SERVICE_USERS_DB_NAME:-service-users}
      SERVICE_MONITORING_DB_NAME: ${SERVICE_MONITORING_DB_NAME:-service-monitoring}
      SERVICE_NOTIFICATIONS_DB_NAME: ${SERVICE_NOTIFICATIONS_DB_NAME:-service-notifications}
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SPRING_DATASOURCE_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8
    container_name: local-redis
    ports:
      - "${SPRING_REDIS_PORT:-6379}:6379"
    env_file:
      - ./.env
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
